from pathlib import Path
import subprocess
import sys
from uuid import uuid4

PDFTK = "pdftk"


def find_pg_files(path):
    """Find the pg_xxxx.pdf files generated by the pdftk burst command. Page files are
    returned in reverse order."""
    return sorted(Path(path).glob("pg_*.pdf"), reverse=True)


def delete_pg_files(path):
    """Delete the pg_xxxx.pdf files generated by the pdftk burst command."""
    for f in find_pg_files(path):
        f.unlink()


def run():
    """Main program."""
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        print("Usage: pdfmerge odd.pdf even.pdf [merged.pdf]")
        return

    # Set the output file name if not specified
    if len(sys.argv) == 4:
        out_path = sys.argv[3]
    else:
        out_path = "merged.pdf"

    work_path = Path()
    even_reversed_path = work_path.joinpath(str(uuid4()) + ".pdf")

    if Path(sys.argv[1]).is_file() and Path(sys.argv[2]).is_file():
        odd_path = Path(sys.argv[1])
        even_path = sys.argv[2]

    delete_pg_files(work_path)

    # Split even pages document into individual pages (pg_xxxx.pdf)
    subprocess.run([PDFTK, even_path, "burst"])

    pg_files = find_pg_files(work_path)

    # Combine even pages in revere order (ascending order since scanned in reverse)
    subprocess.run(
        [PDFTK] + [str(f) for f in pg_files] + ["output", even_reversed_path]
    )

    delete_pg_files(work_path)

    # Combine odd and even page documents into one document
    subprocess.run([PDFTK, odd_path, even_reversed_path, "shuffle", "output", out_path])

    # Cleanup temporary files
    even_reversed_path.unlink()
    delete_pg_files(work_path)
    if Path("doc_data.txt").is_file():  # File created by pdftk
        Path("doc_data.txt").unlink()
